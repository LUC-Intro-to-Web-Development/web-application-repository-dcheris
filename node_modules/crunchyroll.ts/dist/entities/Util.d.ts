import { CrunchyrollAnime, CrunchyrollEpisode, CrunchyrollSeason, DownloadOptions, FFmpegProgress } from "../types";
export declare class Util {
    private static multiTrim;
    private static readonly parsem3u8;
    private static readonly parseTemplate;
    static parseDuration: (file: string, ffmpegPath?: string | undefined) => Promise<number>;
    static formatMS: (ms: number) => string;
    static parseAnime: (animeResolvable: string | CrunchyrollAnime | CrunchyrollSeason) => Promise<CrunchyrollAnime>;
    static parseLocale: (locale: string) => "enUS" | "jaJP" | "esES" | "ptPT" | "frFR" | "deDE" | "itIT" | "ruRU" | "Japanese" | "English" | "Spanish" | "French" | "German" | "Italian" | "Russian" | "Portuguese" | "Arabic" | "arME" | "None";
    private static readonly findQuality;
    static parseDest: (episode: CrunchyrollEpisode, format: string, dest?: string | undefined, template?: string | undefined, playlist?: any, language?: string | undefined) => string;
    static downloadEpisode: (episodeResolvable: string | CrunchyrollEpisode, dest?: string | undefined, options?: DownloadOptions | undefined, videoProgress?: ((progress: FFmpegProgress, resume: () => any) => void | "pause" | "stop" | "kill") | undefined) => Promise<string>;
    static downloadAnime: (animeResolvable: string | CrunchyrollAnime | CrunchyrollSeason, destFolder?: string | undefined, options?: DownloadOptions | undefined, totalProgress?: ((current: number, total: number) => boolean | void) | undefined, videoProgress?: ((progress: FFmpegProgress, resume: () => boolean) => void | "pause" | "stop" | "kill") | undefined) => Promise<string[]>;
    static downloadThumbnails: (episodeResolvable: string | CrunchyrollEpisode, dest?: string | undefined, options?: {
        ffmpegPath?: string | undefined;
        template?: string | undefined;
        language?: string | undefined;
    } | undefined) => Promise<string>;
}
