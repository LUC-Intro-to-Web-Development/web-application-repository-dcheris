"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.Anime = void 0;
var API_1 = __importDefault(require("../API"));
var Episode_1 = require("./Episode");
var Season_1 = require("./Season");
var Util_1 = require("./Util");
var fields = "series.class,series.collection_count,series.description,series.genres,series.in_queue,series.landscape_image,series.media_count,series.media_type,series.name,series.portrait_image,series.publisher_name,series.rating,series.series_id,series.url,series.year";
var Anime = /** @class */ (function () {
    function Anime() {
    }
    Anime.detail = function (anime) { return __awaiter(void 0, void 0, void 0, function () {
        var id, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    id = anime.hasOwnProperty("series_id") ? anime.series_id : anime;
                    return [4 /*yield*/, API_1["default"].get("info", { fields: fields, series_id: id })];
                case 1:
                    response = _a.sent();
                    return [2 /*return*/, response.data];
            }
        });
    }); };
    Anime.id = function (query) { return __awaiter(void 0, void 0, void 0, function () {
        var seriesId, id;
        var _a;
        return __generator(this, function (_b) {
            seriesId = Number((_a = query.match(/\d{5,}/)) === null || _a === void 0 ? void 0 : _a[0]);
            if (seriesId)
                return [2 /*return*/, Anime.detail(seriesId)];
            id = 0;
            if (/kiniro mosaic/i.test(query))
                id = 255553;
            if (/dragon maid/i.test(query))
                id = 272199;
            if (/laid back camp/i.test(query))
                id = 275163;
            if (/himouto umaru chan/i.test(query))
                id = 266785;
            if (/food wars shokugeki no soma/i.test(query))
                id = 265649;
            if (/one punch man/i.test(query))
                id = 277822;
            if (/rent a girlfriend/i.test(query))
                id = 279577;
            if (/masamune kuns revenge/i.test(query))
                id = 272171;
            if (/didnt i say to make my abilities average in the next life/i.test(query))
                id = 278628;
            if (/anime azurlane slow ahead/i.test(query))
                id = 280540;
            if (/princess connect re dive/i.test(query))
                id = 279204;
            if (/saekano how to raise a boring girlfriend/i.test(query))
                id = 264423;
            if (/aho girl/i.test(query))
                id = 273665;
            if (id)
                return [2 /*return*/, Anime.detail(id)];
            return [2 /*return*/, null];
        });
    }); };
    Anime.get = function (animeResolvable) { return __awaiter(void 0, void 0, void 0, function () {
        var name, idSearch, search, anime;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (animeResolvable.hasOwnProperty("collection_id"))
                        return [2 /*return*/, Util_1.Util.parseAnime(animeResolvable)];
                    name = animeResolvable;
                    if (name.includes("crunchyroll.com"))
                        name = name.replace(/https?:\/\/www.crunchyroll.com\//, "").replace(/-/g, " ").replace(/\//g, "");
                    return [4 /*yield*/, Anime.id(name)];
                case 1:
                    idSearch = _a.sent();
                    if (idSearch)
                        return [2 /*return*/, idSearch];
                    return [4 /*yield*/, Anime.search(name)];
                case 2:
                    search = _a.sent();
                    if (!search[0])
                        return [2 /*return*/, Promise.reject("no anime found for " + name + " (is it a season?)")];
                    return [4 /*yield*/, Anime.detail(search[0])];
                case 3:
                    anime = _a.sent();
                    return [2 /*return*/, anime];
            }
        });
    }); };
    Anime.search = function (query, options) { return __awaiter(void 0, void 0, void 0, function () {
        var filter, response, animeSearch;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!options)
                        options = {};
                    filter = options.tagSearch ? "tag:" + query.trim() : "prefix:" + query.trim();
                    if (options.sort)
                        filter += "," + options.sort;
                    return [4 /*yield*/, API_1["default"].get("list_series", { media_type: "anime", filter: filter })];
                case 1:
                    response = _a.sent();
                    if (!response.data[0]) {
                        if (!options.tagSearch)
                            return [2 /*return*/, Anime.search(query, { tagSearch: true })];
                        return [2 /*return*/, Promise.reject("no anime results found for " + query + " (is it a season?)")];
                    }
                    return [4 /*yield*/, Promise.all(response.data.map(function (a) { return Anime.detail(a); }))];
                case 2:
                    animeSearch = _a.sent();
                    return [2 /*return*/, animeSearch];
            }
        });
    }); };
    Anime.episodes = function (animeResolvable, options) { return __awaiter(void 0, void 0, void 0, function () {
        var params, anime, season, name_1, idSearch, _a, response, episodes;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    params = {};
                    anime = null;
                    if (!animeResolvable.hasOwnProperty("collection_id")) return [3 /*break*/, 1];
                    params.collection_id = animeResolvable.collection_id;
                    anime = animeResolvable;
                    return [3 /*break*/, 9];
                case 1:
                    if (!animeResolvable.hasOwnProperty("series_id")) return [3 /*break*/, 3];
                    return [4 /*yield*/, Season_1.Season.get(animeResolvable, options)];
                case 2:
                    season = _b.sent();
                    params.collection_id = season.collection_id;
                    anime = animeResolvable;
                    return [3 /*break*/, 9];
                case 3:
                    name_1 = animeResolvable;
                    if (name_1.includes("crunchyroll.com"))
                        name_1 = name_1.replace(/https?:\/\/www.crunchyroll.com\//, "").replace(/-/g, " ").replace(/\//g, "");
                    return [4 /*yield*/, Anime.id(name_1)];
                case 4:
                    idSearch = _b.sent();
                    if (!idSearch) return [3 /*break*/, 6];
                    return [4 /*yield*/, Season_1.Season.get(idSearch, options)];
                case 5:
                    _a = _b.sent();
                    return [3 /*break*/, 8];
                case 6: return [4 /*yield*/, Season_1.Season.get(name_1, options)];
                case 7:
                    _a = _b.sent();
                    _b.label = 8;
                case 8:
                    anime = _a;
                    if (anime.collection_id)
                        params.collection_id = anime.collection_id;
                    if (!anime.collection_id && anime.series_id)
                        params.series_id = anime.series_id;
                    _b.label = 9;
                case 9: return [4 /*yield*/, API_1["default"].get("list_media", params)];
                case 10:
                    response = _b.sent();
                    episodes = response.data;
                    if (!episodes[0])
                        return [2 /*return*/, Promise.reject("no episodes found for " + anime.name)];
                    return [4 /*yield*/, Promise.all(episodes.map(function (e) { return Episode_1.Episode.get(e.media_id); }))];
                case 11:
                    episodes = _b.sent();
                    return [2 /*return*/, episodes];
            }
        });
    }); };
    return Anime;
}());
exports.Anime = Anime;
