"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.Season = void 0;
var API_1 = __importDefault(require("../API"));
var Util_1 = require("./Util");
var Season = /** @class */ (function () {
    function Season() {
    }
    Season.get = function (seasonResolveable, options) { return __awaiter(void 0, void 0, void 0, function () {
        var name, seasons, season;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    name = seasonResolveable.hasOwnProperty("series_id") ? seasonResolveable.name : seasonResolveable;
                    if (name.includes("crunchyroll.com"))
                        name = name.replace(/https?:\/\/www.crunchyroll.com\//, "").replace(/-/g, " ").replace(/\//g, "");
                    return [4 /*yield*/, Season.search(name, options)];
                case 1:
                    seasons = _a.sent();
                    season = seasons.find(function (s) { return s.name.toLowerCase().includes(name.trim().toLowerCase()); });
                    if (!season)
                        return [2 /*return*/, Promise.reject("no season found for " + name)];
                    return [2 /*return*/, season];
            }
        });
    }); };
    Season.search = function (animeResolvable, options) { return __awaiter(void 0, void 0, void 0, function () {
        var anime, response, subs, dubs, i, lang, englishDubs;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!options)
                        options = {};
                    return [4 /*yield*/, Util_1.Util.parseAnime(animeResolvable)];
                case 1:
                    anime = _a.sent();
                    return [4 /*yield*/, API_1["default"].get("list_collections", { series_id: anime.series_id })];
                case 2:
                    response = _a.sent();
                    if (!response.data[0])
                        return [2 /*return*/, Promise.reject("no season results found for " + animeResolvable)];
                    subs = [];
                    dubs = [];
                    for (i = 0; i < response.data.length; i++) {
                        if (response.data[i].name.toLowerCase().includes("dub")) {
                            dubs.push(response.data[i]);
                        }
                        else {
                            subs.push(response.data[i]);
                        }
                    }
                    lang = options.language ? options.language : "enUS";
                    englishDubs = dubs.filter(function (d) { return d.name.toLowerCase().includes(Util_1.Util.parseLocale(lang).toLowerCase()); });
                    if (!englishDubs[0] && lang === "enUS")
                        englishDubs = dubs;
                    if (lang === "jaJP") {
                        options.preferDub = false;
                        options.preferSub = true;
                    }
                    if (options.preferDub && !options.preferSub)
                        return [2 /*return*/, englishDubs];
                    if (options.preferSub && !options.preferDub)
                        return [2 /*return*/, subs];
                    return [2 /*return*/, response.data];
            }
        });
    }); };
    return Season;
}());
exports.Season = Season;
